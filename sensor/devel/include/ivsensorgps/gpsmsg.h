// Generated by gencpp from file ivsensorgps/gpsmsg.msg
// DO NOT EDIT!


#ifndef IVSENSORGPS_MESSAGE_GPSMSG_H
#define IVSENSORGPS_MESSAGE_GPSMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ivsensorgps
{
template <class ContainerAllocator>
struct gpsmsg_
{
  typedef gpsmsg_<ContainerAllocator> Type;

  gpsmsg_()
    : lon(0.0)
    , lat(0.0)
    , mode(0)
    , heading(0.0)
    , velocity(0.0)
    , status(0)
    , satenum(0)  {
    }
  gpsmsg_(const ContainerAllocator& _alloc)
    : lon(0.0)
    , lat(0.0)
    , mode(0)
    , heading(0.0)
    , velocity(0.0)
    , status(0)
    , satenum(0)  {
    }



   typedef double _lon_type;
  _lon_type lon;

   typedef double _lat_type;
  _lat_type lat;

   typedef int8_t _mode_type;
  _mode_type mode;

   typedef double _heading_type;
  _heading_type heading;

   typedef double _velocity_type;
  _velocity_type velocity;

   typedef int8_t _status_type;
  _status_type status;

   typedef int8_t _satenum_type;
  _satenum_type satenum;




  typedef boost::shared_ptr< ::ivsensorgps::gpsmsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ivsensorgps::gpsmsg_<ContainerAllocator> const> ConstPtr;

}; // struct gpsmsg_

typedef ::ivsensorgps::gpsmsg_<std::allocator<void> > gpsmsg;

typedef boost::shared_ptr< ::ivsensorgps::gpsmsg > gpsmsgPtr;
typedef boost::shared_ptr< ::ivsensorgps::gpsmsg const> gpsmsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ivsensorgps::gpsmsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ivsensorgps::gpsmsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ivsensorgps

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/jade/share/std_msgs/cmake/../msg'], 'ivsensorgps': ['/home/raul/ivpt/sensor/src/ivsensorgps/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ivsensorgps::gpsmsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ivsensorgps::gpsmsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ivsensorgps::gpsmsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ivsensorgps::gpsmsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ivsensorgps::gpsmsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ivsensorgps::gpsmsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ivsensorgps::gpsmsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "48b42c3fc827614869a880f65469156f";
  }

  static const char* value(const ::ivsensorgps::gpsmsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x48b42c3fc8276148ULL;
  static const uint64_t static_value2 = 0x69a880f65469156fULL;
};

template<class ContainerAllocator>
struct DataType< ::ivsensorgps::gpsmsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ivsensorgps/gpsmsg";
  }

  static const char* value(const ::ivsensorgps::gpsmsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ivsensorgps::gpsmsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 lon\n\
float64 lat\n\
byte    mode\n\
float64 heading\n\
float64 velocity\n\
byte    status\n\
byte    satenum\n\
";
  }

  static const char* value(const ::ivsensorgps::gpsmsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ivsensorgps::gpsmsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.lon);
      stream.next(m.lat);
      stream.next(m.mode);
      stream.next(m.heading);
      stream.next(m.velocity);
      stream.next(m.status);
      stream.next(m.satenum);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct gpsmsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ivsensorgps::gpsmsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ivsensorgps::gpsmsg_<ContainerAllocator>& v)
  {
    s << indent << "lon: ";
    Printer<double>::stream(s, indent + "  ", v.lon);
    s << indent << "lat: ";
    Printer<double>::stream(s, indent + "  ", v.lat);
    s << indent << "mode: ";
    Printer<int8_t>::stream(s, indent + "  ", v.mode);
    s << indent << "heading: ";
    Printer<double>::stream(s, indent + "  ", v.heading);
    s << indent << "velocity: ";
    Printer<double>::stream(s, indent + "  ", v.velocity);
    s << indent << "status: ";
    Printer<int8_t>::stream(s, indent + "  ", v.status);
    s << indent << "satenum: ";
    Printer<int8_t>::stream(s, indent + "  ", v.satenum);
  }
};

} // namespace message_operations
} // namespace ros

#endif // IVSENSORGPS_MESSAGE_GPSMSG_H
